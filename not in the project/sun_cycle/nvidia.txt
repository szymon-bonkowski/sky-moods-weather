@Composable
fun SunCycleSection(sunInfo: SunInfo) {
    val now = LocalTime.now()
    val totalDaylightMinutes = Duration.between(sunInfo.sunrise, sunInfo.sunset).toMinutes().toFloat()
    val elapsedMinutes = if (now.isAfter(sunInfo.sunrise) && now.isBefore(sunInfo.sunset)) {
        Duration.between(sunInfo.sunrise, now).toMinutes().toFloat()
    } else if (now.isAfter(sunInfo.sunset)) {
        totalDaylightMinutes
    } else {
        0f
    }

    val progress = (elapsedMinutes / totalDaylightMinutes).coerceIn(0f, 1f)
    val animatedProgress by animateFloatAsState(targetValue = progress, animationSpec = tween(1500), label = "sun_progress")

    TitledCard(title = "WSCHÓD I ZACHÓD SŁOŃCA") {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            SunArc(progress = animatedProgress)
            Spacer(Modifier.height(12.dp))
            Row(
                Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    "Wschód: ${sunInfo.sunrise.format(DateTimeFormatter.ofPattern("HH:mm"))}",
                    style = MaterialTheme.typography.bodyLarge
                )
                Text(
                    "Zachód: ${sunInfo.sunset.format(DateTimeFormatter.ofPattern("HH:mm"))}",
                    style = MaterialTheme.typography.bodyLarge
                )
            }
        }
    }
}

@Composable
fun SunArc(progress: Float) {
    val sunColor = MaterialTheme.colorScheme.primary
    val arcColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.5f)
    val canvasModifier = Modifier
        .fillMaxWidth()
        .height(150.dp)
        .padding(horizontal = 16.dp)

    Canvas(modifier = canvasModifier) {
        val strokeWidth = 6.dp.toPx()
        val arcRect = Rect(
            left = strokeWidth / 2,
            top = size.height / 2 - size.width / 4,
            right = size.width - strokeWidth / 2,
            bottom = size.height / 2 + size.width / 4
        )

        // Draw background arc
        drawArc(
            color = arcColor,
            startAngle = 180f,
            sweepAngle = 180f,
            useCenter = false,
            rect = arcRect,
            style = Stroke(width = strokeWidth)
        )

        // Calculate sun position
        val angle = 180f - (180f * progress)
        val angleRad = Math.toRadians(angle.toDouble()).toFloat()
        val centerX = size.width / 2
        val centerY = size.height / 2
        val radius = (size.width / 2 - strokeWidth) * 0.8f

        val sunX = centerX + radius * cos(angleRad)
        val sunY = centerY + radius * sin(angleRad)

        // Draw sun
        drawCircle(
            brush = Brush.radialGradient(
                colors = listOf(sunColor, sunColor.copy(alpha = 0.3f)),
                center = Offset(sunX, sunY)
            ),
            radius = 16.dp.toPx(),
            center = Offset(sunX, sunY)
        )
        drawCircle(
            color = sunColor,
            radius = 8.dp.toPx(),
            center = Offset(sunX, sunY)
        )
    }
}
